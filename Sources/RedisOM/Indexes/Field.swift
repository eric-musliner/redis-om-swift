import RedisOMCore

/// Describes a single indexed property within a `JsonModel` schema.
///
/// A `Field` represents a model property and its associated metadata
/// used for RedisSearch schema generation, alias resolution, and query building.
///
/// Each field stores:
/// - its Swift property `name`
/// - the RedisSearch-safe `alias` (e.g. `address__city`)
/// - the corresponding JSON path (e.g. `$.address.city`)
/// - its `indexType` (`.tag`, `.text`, `.numeric`, etc.)
/// - and an optional `nestedSchema` describing subfields of nested objects.
///
/// Fields are automatically generated by the `@Model` macro and are
/// consumed by the migrator to create indexes in Redis.
///
/// Nested fields (e.g. for embedded models) contain their own
///   `nestedSchema`, allowing recursive flattening into RedisSearch-compatible
///   alias paths such as `"address__note__description"`.
public struct Field: Sendable {
    public let name: String
    public let alias: String
    public let jsonPath: String
    public let indexType: IndexType
    public let nestedSchema: [Field]?

    public init(
        name: String,
        alias: String,
        jsonPath: String,
        indexType: IndexType,
        nestedSchema: [Field]? = nil
    ) {
        self.name = name
        self.alias = alias
        self.jsonPath = jsonPath
        self.indexType = indexType
        self.nestedSchema = nestedSchema
    }
}

extension Field {
    /// Recursively flattens this field and its nested schema into
    /// fully-qualified `(jsonPath, alias, indexType)` tuples.
    ///
    /// This is used by the migrator and query builder
    /// to translate nested models into RedisSearch-compatible flat indexed paths.
    ///
    /// For example, a field `address.note.description` becomes:
    /// ```
    /// ("$.address.note.description", "address__note__description", .text)
    /// ```
    ///
    /// - Parameters:
    ///   - parentJsonPath: The parent JSON path (if any).
    ///   - parentAlias: The parent alias chain (if any).
    /// - Returns: A list of `(jsonPath, alias, indexType)` tuples representing
    ///   every leaf field in the nested schema.
    public func flattened(
        parentJsonPath: String? = nil,
        parentAlias: String? = nil
    ) -> [(String, String, IndexType)] {
        // Compose alias chain
        let fullAlias = parentAlias.map { "\($0)__\(alias)" } ?? alias

        // If we have a parent path, combine with this field's jsonPath
        let fullJsonPath: String
        if let parent = parentJsonPath {
            // Remove leading "$" from child to avoid "$.$."
            let trimmed = jsonPath.hasPrefix("$.") ? String(jsonPath.dropFirst(2)) : jsonPath
            // Concatenate safely (handles parent ending with [*])
            if parent.hasSuffix("[*]") {
                fullJsonPath = "\(parent).\(trimmed)"
            } else {
                fullJsonPath = "\(parent.replacingOccurrences(of: "$", with: "$")).\(trimmed)"
            }
        } else {
            fullJsonPath = jsonPath
        }

        // Recurse or return leaf
        if let nested = nestedSchema {
            return nested.flatMap {
                $0.flattened(parentJsonPath: fullJsonPath, parentAlias: fullAlias)
            }
        } else {
            return [(fullJsonPath, fullAlias, indexType)]
        }
    }
}

extension Array where Element == Field {
    /// Flatten all fields from a model schema into (jsonPath, alias, indexType)
    public func flattened() -> [(String, String, IndexType)] {
        self.flatMap { $0.flattened() }
    }
}
